using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ElevatorManager
{
    public class Elevator
    {
        public int Num_elevator;
        public int MaxNum_paseengers;
        public int MaxLoad;
        public int Servicefloor;
        public int Currentfloor;
        public int Direction;
        public int Endfloor;
        public int[] Targerfloor;
        public int CountDown;
        public int Opening;
        public int Time_changefloor;

        public Elevator()
        {
            Num_elevator = 0;
            MaxNum_paseengers = 10;
            MaxLoad=10;
            Servicefloor = 0;
            Currentfloor = 0;
            Direction = 0;
            Endfloor = 0;
            Targerfloor = new int[21];
            CountDown = 5;
            Opening = 0;
            Time_changefloor = 2;
        }

        public Elevator(int N_elevator,int MaxN_passenger,int MaxL,int Sfloor)
        {
            Num_elevator = N_elevator;
            MaxNum_paseengers = MaxN_passenger;
            MaxLoad = MaxL;
            Servicefloor = Sfloor;
            Currentfloor = 0;
            Direction = 0;
            Endfloor = 0;
            Targerfloor = new int[21];
            CountDown = 5;
            Opening = 0;
            Time_changefloor = 2;
        }

        public void SetTargerfloor(int Targer)
        {
            this.Targerfloor[Targer] = 1;
            if(this.Direction==0)
            {
                Direction = Currentfloor <= Targer ? 1 : -1;
                this.Endfloor = Targer;
            }
            else if(this.Direction==1)
            {
                Endfloor = Endfloor > Targer ? Endfloor : Targer;
            }
            else if(this.Direction==-1)
            {
                Endfloor = Endfloor < Targer ? Endfloor : Targer;
            }
        }

        public void CancelTargerfloor(int Targer)
        {
            this.Targerfloor[Targer] = 0;
        }

        public void MoveElevator()
        {
            if(this.Opening==1)
            {
                if(CountDown!=0)
                {
                    CountDown--;
                }
                else
                {
                    this.Opening = 0;
                    CountDown = Time_changefloor;
                }
            }
            else if(this.Direction==1)
            {
                if(this.CountDown!=0)
                {
                    CountDown--;
                }
                else
                {
                    this.Currentfloor++;
                    CountDown = Time_changefloor;
                    
                    if(this.Targerfloor[this.Currentfloor]==1)
                    {
                        this.Opening = 1;
                        if (this.Currentfloor == this.Endfloor)
                        {
                            this.Direction = 0;
                        }
                        this.CancelTargerfloor(Currentfloor);
                    }
                }
            }
            else if (this.Direction == -1)
            {
                if (this.CountDown != 0)
                {
                    CountDown--;
                }
                else
                {
                    this.Currentfloor--;
                    CountDown = Time_changefloor;

                    if (this.Targerfloor[this.Currentfloor] == 1)
                    {
                        this.Opening = 1;
                        if (this.Currentfloor == this.Endfloor)
                        {
                            this.Direction = 0;
                            this.Endfloor = 0;
                        }
                        this.CancelTargerfloor(Currentfloor);
                    }
                }
            }
        }

    }
    
    
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ElevatorManager
{
    public class Manager
    {
        public Elevator elevator1 ;
        public Elevator elevator2 ;
        public Elevator elevator3 ;
        public Elevator elevator4 ;

        public Floor Floors;

        public int[] UpService;
        public int[] DownService;


        public Manager()
        {
            elevator1 = new Elevator(1, 10, 10, 1);
            elevator2 = new Elevator(2, 10, 10, 1);
            elevator3 = new Elevator(3, 10, 10, 1);
            elevator4 = new Elevator(4, 10, 10, 1);
            Floors = new Floor();
            UpService = new int[21];
            DownService= new int[21];
            for(int i=0;i<21;i++)
            {
                UpService[i] = 0;
                DownService[i] = 0;
            }
        }

        public int ElevatorDistance(int floor, int direction,Elevator elevtaor)
        {
            if (elevtaor.Direction == 0)
            {
                return Math.Abs(elevtaor.Currentfloor - floor);

            }
            else if (elevtaor.Direction == direction)
            {
                if (elevtaor.Direction == 1)
                {
                    if (elevtaor.Currentfloor <= floor)
                    {
                        return Math.Abs(elevator1.Currentfloor - floor);

                    }
                }
                if (elevtaor.Direction == -1)
                {
                    if (elevtaor.Currentfloor >= floor)
                    {
                        return Math.Abs(elevtaor.Currentfloor - floor);

                    }
                }
            }
            return 100;
        }


        public int ChoseElevator(int floor, int direction)
        {
            int MinDistance=100;
            int tempelevator=0;
            if(ElevatorDistance(floor, direction, elevator1)<MinDistance)
            {
                MinDistance = ElevatorDistance(floor, direction, elevator1);
                tempelevator = 1;
            }
            if (ElevatorDistance(floor, direction, elevator2) < MinDistance)
            {
                MinDistance = ElevatorDistance(floor, direction, elevator1);
                tempelevator = 2;
            }
            if (ElevatorDistance(floor, direction, elevator3) < MinDistance)
            {
                MinDistance = ElevatorDistance(floor, direction, elevator1);
                tempelevator = 3;
            }
            if (ElevatorDistance(floor, direction, elevator4) < MinDistance)
            {
                MinDistance = ElevatorDistance(floor, direction, elevator1);
                tempelevator = 4;
            }
     
            return tempelevator;

        }

        public void Check()
        {
            for (int i = 0; i < 21; i++)
            {
                if (UpService[i] !=0)
                {
                    int x = ChoseElevator(i, 1);
                    if(x==1)
                    {
                        elevator1.SetTargerfloor(i);
                        UpService[i] = 0;
                    }
                    else if (x == 2)
                    {
                        elevator2.SetTargerfloor(i);
                        UpService[i] = 0;
                    }
                    else if (x == 3)
                    {
                        elevator3.SetTargerfloor(i);
                        UpService[i] = 0;
                    }
                    else if (x == 4)
                    {
                        elevator4.SetTargerfloor(i);
                        UpService[i] = 0;
                    }
                }
                if (DownService[i] != 0)
                {
                    int x = ChoseElevator(i, -1);
                    if (x == 1)
                    {
                        elevator1.SetTargerfloor(i);
                        DownService[i] = 0;
                    }
                    else if (x == 2)
                    {
                        elevator2.SetTargerfloor(i);
                        DownService[i] = 0;
                    }
                    else if (x == 3)
                    {
                        elevator3.SetTargerfloor(i);
                        DownService[i] = 0;
                    }
                    else if (x == 4)
                    {
                        elevator4.SetTargerfloor(i);
                        DownService[i] = 0;
                    }
                }
            }
        }

        public void CheckButton(int floor,int direction)
        {
            int x = ChoseElevator(floor, direction);
            if(x==1)
            {
                elevator1.SetTargerfloor(floor);
            }
            else if (x == 2)
            {
                elevator2.SetTargerfloor(floor);
            }
            else if (x == 3)
            {
                elevator3.SetTargerfloor(floor);
            }
            else if (x == 4)
            {
                elevator4.SetTargerfloor(floor);
            }
            else
            {
                SetService(floor, direction);
            }
        }

        public void SetService(int floor,int direction)
        {
            if (direction == 1)
            {
                UpService[floor] = 1;
            }
            else
            {
                DownService[floor] = 1;
            }
        }




        /// <summary>
        /// 楼层按钮触发
        /// floor为楼层，direction为按下的方向，-1为下 ，0为没有按下，1为上
        /// </summary>
        public void FloorBuuton(int floor,int direction)
        {
            this.Floors.SetFloorDirection(floor,direction);
            int x = ChoseElevator(floor, direction);
            if (x!=0)
            {
                switch(x)
                {
                    case 1: elevator1.SetTargerfloor(floor);break;
                    case 2: elevator2.SetTargerfloor(floor);break;
                    case 3: elevator3.SetTargerfloor(floor);break;
                    case 4: elevator4.SetTargerfloor(floor);break;
                    default:
                        break;
                }
            }
            else
            {
                SetService(floor, direction);       
            }
        }


        /// <summary>
        /// 每隔一秒发生的动作
        /// </summary>
        public void MangerAction()
        {
            this.elevator1.MoveElevator();
        }
    }
}
